import matplotlib
matplotlib.use('Agg')  # Prevent tkinter GUI backend errors
from flask import Flask, request, jsonify, send_file, render_template
from io import BytesIO
import matplotlib.pyplot as plt
import networkx as nx
from graph_module import (
    generate_semigroup,
    compute_apery_set,
    build_apery_graph,
    compute_security_number,
    get_layout
)

app = Flask(__name__, template_folder='templates')

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/analyze", methods=["POST"])
def analyze():
    data = request.get_json()
    generators = sorted(set(data.get("generators", [])))

    try:
        # Generate semigroup and Apéry set
        S = generate_semigroup(generators)
        m = min(generators)
        apery = compute_apery_set(S, m)
        
        # Build graph
        G, edges = build_apery_graph(apery, S)
        security_num = compute_security_number(G)

        result = {
            "generators": generators,
            "modulus": m,
            "apery_set": apery,
            "num_nodes": len(apery),
            "num_edges": len(edges),
            "security_number": security_num,
            "sample_edges": edges[:5],
        }

        return jsonify(result)
    except Exception as e:
        return jsonify({"error": str(e)})

@app.route("/plot", methods=["POST"])
def plot_graph():
    data = request.get_json()
    generators = sorted(set(data.get("generators", [])))

    try:
        # Generate semigroup and Apéry set
        S = generate_semigroup(generators)
        m = min(generators)
        apery = compute_apery_set(S, m)
        
        # Build graph
        G, edges = build_apery_graph(apery, S)
        security_num = compute_security_number(G)
        
        # Create layout and plot
        pos = get_layout(G, apery)
        
        fig_size = min(8, 6 + len(apery) * 0.1)
        plt.figure(figsize=(fig_size, fig_size))
        
        nx.draw_networkx_nodes(G, pos,
                             node_color='lightblue',
                             node_size=500,
                             edgecolors='black')
        nx.draw_networkx_edges(G, pos,
                             edge_color='black', alpha=0.7)
        nx.draw_networkx_labels(G, pos,
                              font_size=8, font_weight='bold')

        plt.title(f"Apéry Graph for S = <{', '.join(map(str, generators))}>\nSecurity Number = {security_num}")
        plt.axis('off')
        plt.tight_layout()

        buf = BytesIO()
        plt.savefig(buf, format="png", dpi=150)
        plt.close()
        buf.seek(0)

        return send_file(buf, mimetype="image/png")
    except Exception as e:
        return jsonify({"error": str(e)})

@app.route("/chatbot", methods=["POST"])
def chatbot():
    data = request.get_json()
    user_msg = data.get("message", "").lower()

    # Comprehensive responses for Apéry graphs
    if any(word in user_msg for word in ["security", "connectivity", "vertex"]):
        response = (
            "Security Number (Vertex Connectivity):\n"
            "1. Minimum number of vertices whose removal disconnects the graph\n"
            "2. Measures graph robustness - higher means more resilient\n"
            "3. For Apéry graphs, reveals structural stability\n"
            "4. Computed using networkx's node_connectivity() algorithm"
        )
    
    elif any(word in user_msg for word in ["apéry", "apery", "set"]):
        response = (
            "Apéry Set:\n"
            "1. For modulus m, the set {a₀, a₁, ..., a₍m₋₁₎} where aᵢ ≡ i (mod m)\n"
            "2. Each aᵢ is the smallest element in S congruent to i modulo m\n"
            "3. Forms vertices of the Apéry graph\n"
            "4. Uniquely determines the numerical semigroup"
        )
    
    elif any(word in user_msg for word in ["edge", "edges"]):
        response = (
            "Edges in Apéry graphs:\n"
            "1. Connect two Apéry elements a and b if |a - b| ∈ S\n"
            "2. Represent distance relationships within the semigroup\n"
            "3. Edge count affects graph density and connectivity\n"
            "4. Example: If |4-7|=3 ∈ S, then edge between 4 and 7"
        )
    
    elif any(word in user_msg for word in ["graph", "structure"]):
        response = (
            "Apéry Graph Properties:\n"
            "1. Vertices = Apéry set elements\n"
            "2. Edges = {(a,b) | |a-b| ∈ S}\n"
            "3. Undirected simple graph\n"
            "4. Vertex connectivity = Security Number\n"
            "5. Layout adapts to graph size and structure"
        )
    
    elif any(word in user_msg for word in ["semigroup", "numerical"]):
        response = (
            "Numerical Semigroups:\n"
            "1. Additive submonoids of ℕ with finite complement\n"
            "2. Generated by coprime positive integers\n"
            "3. Apéry sets encode modular structure\n"
            "4. Applications in coding theory and combinatorics"
        )
    
    elif any(word in user_msg for word in ["layout", "visual"]):
        response = (
            "Graph Layout Strategy:\n"
            "1. Small graphs (<25 nodes): Circular layout\n"
            "2. Medium graphs (25-60): Kamada-Kawai force-directed\n"
            "3. Large graphs (>60): Spring layout\n"
            "4. Trees: Linear horizontal layout"
        )
    
    elif any(word in user_msg for word in ["generator", "input"]):
        response = (
            "Generator Requirements:\n"
            "1. Positive integers (e.g., 3,5 or 4,7,9)\n"
            "2. Should be coprime for interesting structure\n"
            "3. Modulus = smallest generator\n"
            "4. Typical examples: <3,5>, <4,7>, <5,6,7>"
        )
    
    elif any(word in user_msg for word in ["application", "use"]):
        response = (
            "Applications:\n"
            "1. Algebraic geometry - studying curve singularities\n"
            "2. Coding theory - constructing better codes\n"
            "3. Combinatorial optimization\n"
            "4. Mathematical physics - lattice models"
        )
    
    elif any(word in user_msg for word in ["hi", "hello", "how are you"]):
        response = "Hello! I can explain Apéry graphs, security numbers, numerical semigroups, and related concepts. What would you like to know?"
    
    else:
        response = (
            "I can explain these topics:\n"
            "1. Security Number (Vertex Connectivity)\n"
            "2. Apéry Set definition\n"
            "3. Edge formation rules\n"
            "4. Graph structure and properties\n"
            "5. Numerical semigroup theory\n"
            "6. Visualization techniques\n"
            "7. Applications\n"
            "Ask me anything about Apéry graphs!"
        )

    return jsonify({"response": response})

if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)